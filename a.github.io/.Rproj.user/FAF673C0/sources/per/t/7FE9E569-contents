---
title: "Análise de Preferência"
editor: visual
---

# Repelência fenois - com base no cálculo de indíce

```{r, echo=FALSE, results='hide', warning=FALSE, message=FALSE}
arenas <- read.csv("arenas_fip606.csv", header = T, stringsAsFactors = T)

# Analisar as variáveis do modelo
if(!require(dplyr)) install.packages("dplyr") 
library(dplyr)

glimpse(arenas)
```

## Criando o modelo estatístico

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Instalar e carregar pacotes necessários
if (!require(lme4)) install.packages("lme4") 
library(lme4)

if (!require(glmmTMB)) install.packages("glmmTMB")
library(glmmTMB) 

# Ajustar modelo misto com efeito aleatório de tempo e família binomial negativa (modelo 1)
mod1 <- glmmTMB(num ~ trat * local + (1 | tempo), 
                data = arenas,
                family = nbinom2)

summary(mod1)

# Ajustar modelo apenas com efeitos fixos (modelo 2)
mod2 <- glmmTMB(num ~ trat * local, 
                data = arenas,
                family = nbinom2)

summary(mod2)

# Ajustar modelo usando glmer (Poisson), incluindo tempo como efeito fixo e aleatório (modelo 3)
mod3 <- glmer(num ~ trat * local * tempo + (1 | tempo), 
              data = arenas, 
              family = poisson(link = "log"))

summary(mod3)

# Comparar os modelos usando AIC
AIC(mod1, mod2, mod3)

# Comentário interpretativo
# 
```

*O modelo ajustado com glmmTMB (modelo 1) apresenta o menor AIC, sendo o mais indicado.*

*Apesar da variável "tempo" não apresentar efeito significativo como efeito fixo, decidimos mantê-la como efeito aleatório no modelo, devido à sua importância no delineamento experimental e na estrutura dos dados coletados.*

*Os modelos GLMMTMB (Generalized Linear Mixed Models with Template Model Builder) são uma extensão dos modelos lineares generalizados mistos (GLMM). Esse tipo de modelo se encaixou bem devido à distribuição não homogênea dos resíduos dos dados.*

## Avaliação de pressupostos

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Normalidade de resíduos

if(!require(nortest)) install.packages("nortest")
library(nortest)

plot(residuals(mod1))

lillie.test(residuals(mod1)) # Não atende pressupostos

# Homocedastiticade

bartlett.test(num ~ tempo, data = arenas) # Não atende pressupostos
bartlett.test(num ~ trat, data = arenas) # Não atende pressupostos
bartlett.test(num ~ local, data = arenas) # Não atende pressupostos
```

*Os resultados dos testes apontam que os dados não seguem os pressupostos estabelecidos* *Logo, devemos escolher um modelo não paramétrico para descrever a relação entre as variáveis*

## Modelo escolhido

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Modelo misto com binomial negativa (recomendado para dados de contagem com sobredispersão)
mod1 <- glmmTMB(num ~ trat * local * tempo + (1|tempo),
                 data = arenas,
                 family = nbinom2)

summary(mod1)
```

## Teste post-hoc

```{r, echo=FALSE, warning=FALSE, message=FALSE}
if(!require(emmeans)) install.packages("emmeans")
library(emmeans)
if(!require(multcomp)) install.packages("multcomp")
library(multcomp)
if(!require(multcompView)) install.packages("multcompView")
library(multcompView)

# Calcular as médias marginais estimadas
emm <- emmeans(mod1, pairwise ~ trat * local, adjust = "tukey")

# Obter as comparações
comparacoes <- as.data.frame(emm$contrasts)


# Criar uma matriz de p-valores
teste_posthoc <- emmeans(mod1, pairwise ~ trat | local)$contrasts %>%
  summary(infer = TRUE)

# Obter as letras
letras <- cld(emmeans(mod1, ~ trat | local),
          adjust = "tukey",
          Letters = letters,  
          alpha = 0.05)

# Visualizar as letras
print(letras)

```

*Esse processo permite utilizar o pacote emmeans e os pacotes da família multicomp para criar uma tabela com as letras derivadas do resultado do teste post-hoc.* *Com a tabela organizada, podemos utilizá-la para inserir essas letras no gráfico a seguir.*

## Geração do gráfico

```{r, echo=FALSE, warning=FALSE, message=FALSE}
# Gráfico com as letras de significância
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)

# Preparação dos dados
dados_observados <- arenas %>%
  group_by(trat, local) %>%
  summarise(
    media_num = mean(num),
    sd_num = sd(num),
    n = n(),
    se_num = sd_num / sqrt(n)
  ) %>%
  ungroup()

# Verificar nomes das colunas de 'letras'
letras_df <- as.data.frame(letras)
print(colnames(letras_df))

# Selecionar as colunas desejadas
colunas <- c("trat", "local", ".group")
letras_selecionadas <- letras_df[, colnames(letras_df) %in% colunas]

# Fazer o join
dados_completos <- left_join(dados_observados, 
                            letras_selecionadas,
                            by = c("trat", "local"))

# Definir a paleta de cores personalizada
paleta_cores <- c(
  "NT" = "#D0E789",
  "C"  = "#50A34B",
  "E"  = "#3320A2",
  "G"  = "#8D0987",
  "T"  = "darkorange"
)

# Criar o gráfico com a paleta de cores
ggplot(dados_completos, aes(x = trat, y = media_num, fill = trat)) +
  geom_col(position = position_dodge()) + 
  geom_errorbar(aes(ymin = media_num - se_num, ymax = media_num + se_num), 
                width = 0.2, position = position_dodge(0.9)) +
  geom_text(aes(label = .group, y = media_num + se_num + 0.5), 
            position = position_dodge(0.9), vjust = 0, size = 3.5) +
  facet_wrap(~ local, scales = "free_y") +
  labs(x = "Tratamento", 
       y = "Número médio de insetos observados",
       fill = "Tratamentos") +
  theme_minimal() +
  theme(legend.position = "top") + 
  scale_fill_manual(values = paleta_cores) +  # Aplique a paleta de cores aqui
  scale_y_continuous(limits = c(0, 14))

```

## 
